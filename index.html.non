<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Mini JDR avec Dés</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #1e1e2f;
      color: #f0f0f0;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    h1 {
      text-align: center;
      margin: 20px 0;
      color: #ffcc00;
    }

    .buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-bottom: 10px;
    }

    button {
      padding: 12px 20px;
      border-radius: 12px;
      border: none;
      font-size: 16px;
      cursor: pointer;
      transition: 0.2s;
      font-weight: bold;
    }

    button:hover {
      transform: scale(1.05);
    }

    button:active {
      transform: scale(0.95);
    }

    .start-btn { background: #ff6666; color: #fff; }
    .next-btn { background: #66b3ff; color: #fff; }

    .log {
      flex: 1;
      background: #2b2b3d;
      margin: 0 10px 10px 10px;
      border-radius: 12px;
      padding: 10px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    .dice {
      display: inline-block;
      margin: 2px;
      padding: 10px 14px;
      border-radius: 8px;
      font-weight: bold;
      font-size: 18px;
      text-align: center;
      min-width: 28px;
      animation: pop 0.2s;
    }

    @keyframes pop {
      0% { transform: scale(0); }
      60% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    .phys { background: #ffcccc; border: 2px solid #ff3333; color: #990000; }
    .ment { background: #cce0ff; border: 2px solid #3399ff; color: #003399; }
    .bonus { background: #ffffff; border: 2px solid #000; color: #000; }

    .log div {
      background: #3b3b55;
      border-radius: 8px;
      padding: 6px 8px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h1>Mini Jeu de Rôle avec Dés</h1>
  <div class="buttons">
    <button class="start-btn" onclick="startGame()">Nouvelle Partie</button>
    <button class="next-btn" onclick="nextTurn()">Tour suivant</button>
  </div>
  <div class="log" id="log"></div>

  <script>
    class Character {
      constructor(name, level=1) {
        this.name = name;
        this.level = level;
        this.hp = 10;
        this.physDice = [6];
        this.mentDice = [6];
        this.bonusDice = [4];
        this.resPhys = [6];
        this.resMent = [6];
        this.exp = 0;
        this.nextLevelExp = 10;
      }

      rollDice(diceArr, cssClass) {
        const rolls = diceArr.map(sides => Math.floor(Math.random()*sides)+1);
        logDice(rolls, cssClass);
        return rolls.reduce((a,b)=>a+b,0);
      }

      rollAction(type) {
        let base = 0;
        if(type === 'phys') base = this.rollDice(this.physDice, 'phys');
        if(type === 'ment') base = this.rollDice(this.mentDice, 'ment');
        const bonus = this.rollDice(this.bonusDice, 'bonus');
        return base + bonus;
      }

      rollResistance(type) {
        if(type==='phys') return this.rollDice(this.resPhys, 'phys');
        else return this.rollDice(this.resMent, 'ment');
      }

      takeDamage(dmg, type) {
        const resist = this.rollResistance(type);
        if(resist >= dmg) {
          log(`${this.name} bloque l'attaque (${resist} >= ${dmg}) !`);
          return;
        }
        const taken = dmg - resist;
        this.hp -= taken;
        log(`${this.name} subit ${taken} dégâts (${dmg}-${resist}), PV restants: ${this.hp}`);
      }

      gainExp(amount) {
        this.exp += amount;
        log(`${this.name} gagne ${amount} EXP (total ${this.exp}/${this.nextLevelExp})`);
        if(this.exp >= this.nextLevelExp) {
          this.levelUp();
        }
      }

      levelUp() {
        this.level++;
        this.exp = 0;
        this.nextLevelExp += 10;
        log(`${this.name} passe niveau ${this.level}! Choix: ajouter un dé.`);
        const choice = Math.floor(Math.random()*4);
        if(choice===0) this.physDice.push(6);
        if(choice===1) this.mentDice.push(6);
        if(choice===2) this.bonusDice.push(4);
        if(choice===3) this.resPhys.push(6);
        log(`${this.name} ajoute un dé ${['physique','mental','bonus','résistance'][choice]}`);
      }
    }

    function log(msg) {
      const div = document.getElementById('log');
      const logEntry = document.createElement('div');
      logEntry.textContent = msg;
      div.appendChild(logEntry);
      div.scrollTop = div.scrollHeight;
    }

    function logDice(rolls, cssClass) {
      const div = document.getElementById('log');
      const diceDiv = document.createElement('div');
      rolls.forEach(r => {
        const span = document.createElement('span');
        span.className = `dice ${cssClass}`;
        span.textContent = r;
        diceDiv.appendChild(span);
      });
      div.appendChild(diceDiv);
      div.scrollTop = div.scrollHeight;
    }

    let player;
    let enemy;

    function startGame() {
      document.getElementById('log').innerHTML = '';
      player = new Character('Héros');
      spawnEnemy();
      log('La partie commence !');
    }

    function spawnEnemy() {
      enemy = new Character('Ennemi', player.level);
      enemy.hp = 6 + player.level*2;
      log(`Un ennemi de niveau ${enemy.level} apparaît avec ${enemy.hp} PV !`);
    }

    function nextTurn() {
      if(!player || !enemy) return;
      if(player.hp<=0) { log('Game Over'); return; }
      if(enemy.hp<=0) {
        log("L'ennemi est vaincu !");
        player.gainExp(5);
        spawnEnemy();
        return;
      }

      const pInit = Math.floor(Math.random()*6)+1;
      const eInit = Math.floor(Math.random()*6)+1;
      log(`Initiative: joueur ${pInit} vs ennemi ${eInit}`);
      if(pInit >= eInit) {
        const dmg = player.rollAction('phys');
        enemy.takeDamage(dmg, 'phys');
        if(enemy.hp>0) {
          const edmg = enemy.rollAction('phys');
          player.takeDamage(edmg, 'phys');
        }
      } else {
        const edmg = enemy.rollAction('phys');
        player.takeDamage(edmg, 'phys');
        if(player.hp>0) {
          const dmg = player.rollAction('phys');
          enemy.takeDamage(dmg, 'phys');
        }
      }
    }
  </script>
</body>
</html>
